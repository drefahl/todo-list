/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query';

import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import { unref } from 'vue';
import type { MaybeRef } from 'vue';

export type Health200 = {
  time: string;
  uptime: number;
};

export type CreateTaskBody = {
  /**
   * @minLength 2
   * @maxLength 100
   */
  title: string;
  /**
   * @minimum 0
   * @maximum 9007199254740991
   */
  priority?: number;
  completed?: boolean;
};

export type UpdateTaskBody = {
  /**
   * @minLength 2
   * @maxLength 100
   */
  title?: string;
  /**
   * @minimum 0
   * @maximum 9007199254740991
   */
  priority?: number;
  completed?: boolean;
};

export const health = (options?: AxiosRequestConfig): Promise<AxiosResponse<Health200>> => {
  return axios.default.get(`/api/v1/health/`, options);
};

export const getHealthQueryKey = () => {
  return ['api', 'v1', 'health'] as const;
};

export const getHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof health>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getHealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof health>>> = ({ signal }) =>
    health({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>;
};

export type HealthQueryResult = NonNullable<Awaited<ReturnType<typeof health>>>;
export type HealthQueryError = AxiosError<unknown>;

export function useHealth<TData = Awaited<ReturnType<typeof health>>, TError = AxiosError<unknown>>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getHealthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

export const getTasks = (options?: AxiosRequestConfig): Promise<AxiosResponse<null>> => {
  return axios.default.get(`/api/v1/tasks/`, options);
};

export const getGetTasksQueryKey = () => {
  return ['api', 'v1', 'tasks'] as const;
};

export const getGetTasksQueryOptions = <
  TData = Awaited<ReturnType<typeof getTasks>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetTasksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasks>>> = ({ signal }) =>
    getTasks({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>;
};

export type GetTasksQueryResult = NonNullable<Awaited<ReturnType<typeof getTasks>>>;
export type GetTasksQueryError = AxiosError<unknown>;

export function useGetTasks<TData = Awaited<ReturnType<typeof getTasks>>, TError = AxiosError<unknown>>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTasksQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & { queryKey: QueryKey };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

export const createTask = (
  createTaskBody: MaybeRef<CreateTaskBody>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  createTaskBody = unref(createTaskBody);

  return axios.default.post(`/api/v1/tasks/`, createTaskBody, options);
};

export const getCreateTaskMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createTask>>, TError, { data: CreateTaskBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof createTask>>, TError, { data: CreateTaskBody }, TContext> => {
  const mutationKey = ['createTask'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTask>>, { data: CreateTaskBody }> = (props) => {
    const { data } = props ?? {};

    return createTask(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTaskMutationResult = NonNullable<Awaited<ReturnType<typeof createTask>>>;
export type CreateTaskMutationBody = CreateTaskBody;
export type CreateTaskMutationError = AxiosError<unknown>;

export const useCreateTask = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createTask>>, TError, { data: CreateTaskBody }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<Awaited<ReturnType<typeof createTask>>, TError, { data: CreateTaskBody }, TContext> => {
  const mutationOptions = getCreateTaskMutationOptions(options);

  return useMutation(mutationOptions);
};

export const updateTask = (
  id: MaybeRef<number>,
  updateTaskBody: MaybeRef<UpdateTaskBody>,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  id = unref(id);
  updateTaskBody = unref(updateTaskBody);

  return axios.default.put(`/api/v1/tasks/${id}`, updateTaskBody, options);
};

export const getUpdateTaskMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTask>>,
    TError,
    { id: number; data: UpdateTaskBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTask>>,
  TError,
  { id: number; data: UpdateTaskBody },
  TContext
> => {
  const mutationKey = ['updateTask'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTask>>, { id: number; data: UpdateTaskBody }> = (
    props,
  ) => {
    const { id, data } = props ?? {};

    return updateTask(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTaskMutationResult = NonNullable<Awaited<ReturnType<typeof updateTask>>>;
export type UpdateTaskMutationBody = UpdateTaskBody;
export type UpdateTaskMutationError = AxiosError<unknown>;

export const useUpdateTask = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTask>>,
    TError,
    { id: number; data: UpdateTaskBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof updateTask>>,
  TError,
  { id: number; data: UpdateTaskBody },
  TContext
> => {
  const mutationOptions = getUpdateTaskMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteTask = (id: MaybeRef<number>, options?: AxiosRequestConfig): Promise<AxiosResponse<null>> => {
  id = unref(id);

  return axios.default.delete(`/api/v1/tasks/${id}`, options);
};

export const getDeleteTaskMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTask>>, TError, { id: number }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteTask>>, TError, { id: number }, TContext> => {
  const mutationKey = ['deleteTask'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTask>>, { id: number }> = (props) => {
    const { id } = props ?? {};

    return deleteTask(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTaskMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTask>>>;

export type DeleteTaskMutationError = AxiosError<unknown>;

export const useDeleteTask = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTask>>, TError, { id: number }, TContext>;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<Awaited<ReturnType<typeof deleteTask>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteTaskMutationOptions(options);

  return useMutation(mutationOptions);
};
